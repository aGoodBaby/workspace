package com.example.news;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;

import android.annotation.SuppressLint;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.os.Handler;
import android.os.Message;
import android.support.v4.util.LruCache;
import android.widget.ImageView;

public class ImageLoader {
	
	private ImageView mImageView;
	private String mUrl;
	
	
	private LruCache<String, Bitmap> mCache;
	
	public ImageLoader(){
		
		int maxMemory=(int) Runtime.getRuntime().maxMemory();
		int cacheSize=maxMemory/4;
		
		mCache= new LruCache<String, Bitmap>(cacheSize){
			@SuppressLint("NewApi")
			protected int sizeOf(String key, Bitmap value) {
				return value.getByteCount();
			}
		};
		
	}
	
	public void addBitmapToCache(String url, Bitmap bitmap){
		if(mCache.get(url)==null){
			mCache.put(url, bitmap);
		}
		
	}
	public Bitmap getBitmapFromCache(String url) {
		return mCache.get(url);
	}
			
	
	
	
	
	
	
	
	private Handler handler=new Handler(){
		public void handleMessage(android.os.Message msg) {
			super.handleMessage(msg);
			
			if(mImageView.getTag().equals(mUrl)){
				mImageView.setImageBitmap((Bitmap) msg.obj);
			}
			
			
		}
	};
	
	
	
	public void showImageByThread(ImageView imageView,final String url){
		
		mImageView=imageView;
		mUrl=url;
		
		new Thread(){
			@Override
			public void run() {
				// TODO Auto-generated method stub
				super.run();
				Bitmap bitmap=getBitmapFromURL(url);
				Message message=Message.obtain();
				message.obj=bitmap;
				handler.sendMessage(message);
			}
		}.start();
	}
	
	public Bitmap getBitmapFromURL(String urlString){
		
		Bitmap bitmap;
		InputStream is;
		
		try {
			URL url=new URL(urlString);
			try {
				HttpURLConnection connection=(HttpURLConnection) url.openConnection();
				is=new BufferedInputStream(connection.getInputStream());
				bitmap=BitmapFactory.decodeStream(is);
				connection.disconnect();
				is.close();
				
//				try {
//					Thread.sleep(1000);
//				} catch (InterruptedException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//				}
				
				return bitmap;
				
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		} catch (MalformedURLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		return null;
	}
	
	public void showImageViewByAsyncTask(ImageView imageView,String url){
		Bitmap bitmap=getBitmapFromCache(url);
		if(bitmap==null){
		new NewsAsyncTask(imageView,url).execute(url);
		}else{
			imageView.setImageBitmap(bitmap);
		}
	}
	
	private class NewsAsyncTask extends AsyncTask<String, Void, Bitmap>{

		private ImageView mImageView;
		private String mUrl;
		
		public NewsAsyncTask(ImageView imageView,String url){
			mImageView=imageView;
			mUrl=url;
		}
		
		@Override
		protected Bitmap doInBackground(String... params) {
			// TODO Auto-generated method stub
			//Bitmap bitmap=getBitmapFromURL(params[0]);
			
			Bitmap bitmap=getBitmapFromURL(urlString);
			
			
				if(bitmap!=null){
				addBitmapToCache(params[0], bitmap);
				}
			
			
			return bitmap;
		}
		
		@Override
		protected void onPostExecute(Bitmap result) {
			// TODO Auto-generated method stub
			super.onPostExecute(result);
			
			if(mImageView.getTag().equals(mUrl))
			{
				mImageView.setImageBitmap(result);
			}
			
		}
		
	}
	
	

}
